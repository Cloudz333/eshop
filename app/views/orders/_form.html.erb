<div class="form-area">
  <%= form_for(@order) do |f| %>
    <%= f.label :name %>
    <%= f.text_field :name, class: 'form-control' %>
    <br>
    <div id="locationField">
      <input id="autocomplete" class="form-control" placeholder="Enter your address"
             onFocus="geolocate()" type="text"></input>
    </div>
    <br>
    <div class="form-row">
      <div class="col-sm-8">
        <%= f.label :street %>
        <%= f.text_field :street, class: 'form-control', id: 'route', readonly: true %>
      </div>
      <div class="col-sm-4">
        <%= f.label :street_number %>
        <%= f.text_field :street_number, class: 'form-control', id: 'street_number', readonly: true %>
      </div>
    </div>
    <%= f.label :city %>
    <%= f.text_field :city, class: 'form-control', id: 'locality', readonly: true %>
    <div class="form-row">
      <div class="col-sm-8">
        <%= f.label :state %>
        <%= f.text_field :state, class: 'form-control', id: 'administrative_area_level_1', readonly: true %>
      </div>
      <div class="col-sm-4">
        <%= f.label :zip_code %>
        <%= f.text_field :zip_code, class: 'form-control', id: 'postal_code', readonly: true %>
      </div>
    </div>
    <%= f.label :country %>
    <%= f.text_field :country, class: 'form-control', id: 'country', readonly: true %>
    <br>
    <%= f.label :email %>
    <%= f.email_field :email, class: 'form-control' %>
    <br>
    <%= f.label :pay_type %>
    <%= f.select :pay_type, Order.pay_types.keys %>
    <br>
    <br>
    <%= f.submit yield(:button_text), class: "btn btn-primary pull-right", value: "Submit" %>
    <%= button_to "Back", carts_path, class: "btn btn-danger" %>
  <% end %>
</div>

<script>
    var placeSearch, autocomplete;
    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        for (var component in componentForm) {
            document.getElementById(component).value = '';
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i][componentForm[addressType]];
                document.getElementById(addressType).value = val;
            }
        }
    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=ES FEHL DIE KEY&libraries=places&callback=initAutocomplete"
        async defer></script>
